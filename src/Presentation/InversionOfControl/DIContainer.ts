import { Container } from "inversify";
import 'reflect-metadata'; 
import { IMailer } from "../../Infrastructure/Interfaces/IMailer";
import { INTERFACE_TYPE } from "../../Domain/Constants/app-constants";
import { IBookRepository } from "../../Infrastructure/IRepositories/IBookRepository";
import { IBookInteractor } from "../../Application/IInteractors/IBookInteractor";
import { Mailer } from "../../Infrastructure/MailerService/Mailer";
import { BookRepository } from "../../Infrastructure/Repositories/bookRepository";
import { BookInteractor } from "../../Application/Interactors/bookInteractor";
import { BookController } from "../Controllers/bookController";
import { IAccountInteractor } from "../../Application/IInteractors/IAccountInteractor";
import { AccountInteractor } from "../../Application/Interactors/AccountInteracor";
import { UserRepository } from "../../Infrastructure/Repositories/userRepository";
import { AccountController } from "../Controllers/accountController";
import { JwtTokenService } from "../../Infrastructure/TokenService/JwtTokenService";
import { IJwtTokenService } from "../../Infrastructure/Interfaces/IJwtTokenService";
import { RefreshTokenRepository } from "../../Infrastructure/Repositories/refreshTokenRepository";
import { IUserRepository } from "../../Infrastructure/IRepositories/IUserRepository";
import { IRefreshTokenRepository } from "../../Infrastructure/IRepositories/IRefreshTokenRepository";
import { UUIDService } from "../../Infrastructure/UUID/uuidService";
import { IuuidService } from "../../Infrastructure/Interfaces/IuuidService";
import { IUserInteractor } from "../../Application/IInteractors/IUserInteractor";
import { UserInteractor } from "../../Application/Interactors/userInteractor";
import { UserController } from "../Controllers/userController";
const container = new Container();
container.bind<IMailer>(INTERFACE_TYPE.Mailer).to(Mailer);
container.bind<IBookRepository>(INTERFACE_TYPE.BookRepository).to(BookRepository);
container.bind<IBookInteractor>(INTERFACE_TYPE.BookInteractor).to(BookInteractor);
container.bind<IAccountInteractor>(INTERFACE_TYPE.AccountInteractor).to(AccountInteractor);
container.bind<IUserRepository>(INTERFACE_TYPE.UserRepository).to(UserRepository);
container.bind<IJwtTokenService>(INTERFACE_TYPE.JwtTokenService).to(JwtTokenService);
container.bind<IRefreshTokenRepository>(INTERFACE_TYPE.RefreshTokenRepository).to(RefreshTokenRepository);
container.bind<IuuidService>(INTERFACE_TYPE.uuidService).to(UUIDService);
container.bind<IUserInteractor>(INTERFACE_TYPE.UserInteractor).to(UserInteractor);
container.bind(INTERFACE_TYPE.AccountController).to(AccountController);
container.bind(INTERFACE_TYPE.BookController).to(BookController);
container.bind(INTERFACE_TYPE.UserController).to(UserController);
export { container };